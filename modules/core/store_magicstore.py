import json
import random
from modules.core.store_item import Item



class MagicStore:
    def __init__(self, name = "–ü–æ–ª—É–Ω–æ—á–Ω—ã–π –ö–æ—Ç–µ–ª", store_size = 10000):
        self.name = name
        self.store_size = store_size
        self.current_size = 0
        self.items = []
    
    def load_items_from_file(self, items_path):
        with open(items_path, 'r', encoding='utf-8') as file:
            json_items = json.load(file)
        
        for i,item in json_items.items():
            current_item = Item(name = item['name'],
                                count=item['count'])

            #TODO: –î–æ–±–∏—Ç—å –∑–¥–µ—Å—å –ø–æ–ª—è —Ç–æ–≤–∞—Ä–∞ (–≥–æ–≤–æ—Ä–∏—Ç—å –∏ –ø–∏—Å–∞—Ç—å —á—Ç–æ —É –º–µ–Ω—è –ª–∞–ø–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–æ!!!!)
            
            print(f"–í –º–∞–≥–∏—á–µ—Å–∫–∏–π –º–∞–≥–∞–∑–∏–Ω {self.name} –¥–æ–±–∞–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä!")
            print(current_item)
            self.items.append(current_item)
        
    def generate_items(self):
        magic_items = [
            "–ú–µ—á –≤–æ–ª—à–µ–±—Å—Ç–≤–∞",
            "–©–∏—Ç –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π",
            "–ñ–µ–∑–ª –æ–≥–Ω–µ–Ω–Ω—ã—Ö —à–∞—Ä–æ–≤",
            "–ö–æ–ª—å—Ü–æ –∑–∞—â–∏—Ç—ã",
            "–ê–º—é–ª–µ—Ç —Å–∏–ª—ã",
            "–ó–µ–ª—å–µ –∏—Å—Ü–µ–ª–µ–Ω–∏—è",
            "–°–≤–∏—Ç–æ–∫ —Å–≤–µ—Ç–∞",
            "–ö–Ω–∏–≥–∞ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π",
            "–ë–æ—Ç–∏–Ω–∫–∏ –º–∞–≥–∏–∏",
            "–ü–æ—Å–æ—Ö –º–æ–ª–Ω–∏–∏",
            "–ö—Ä–∏—Å—Ç–∞–ª–ª —è—Å–Ω–æ–≤–∏–¥–µ–Ω–∏—è",
            "–ü–µ—Ä–æ —Ñ–µ–Ω–∏–∫—Å–∞",
            "–®–∫–∞–ª—å–∫–∞ –¥—Ä–∞–∫–æ–Ω–∞",
            "–û—Ä—Ç –º–∏—Ñ—Ä–∏–ª–∞",
            "–ê—Ä–∫–∞–Ω–Ω—ã–π –∫—Ä–∏—Å—Ç–∞–ª–ª",
            "–ö–Ω–∏–∂–∫–∞ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π",
            "–ú–∞–≥–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–æ",
            "–ó–∞—â–∏—â–µ–Ω–Ω–æ–µ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ",
            "–ö—Ä—ã–ª—å—è –∞–Ω–≥–µ–ª–∞",
            "–°—Ç–æ—è—â–∏–π —Å—Ç–æ–ª"
        ]

        # –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π
        descriptions = [
            "–ù–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –∑–ª—ã—Ö –¥—É—Ö–æ–≤.",
            "–ü–æ–∑–≤–æ–ª—è–µ—Ç –ª–µ—Ç–∞—Ç—å –Ω–∞–¥ –º–∏—Ä–æ–º.",
            "–î–∞–µ—Ç —Å–∏–ª—É –æ–≥–Ω—è –∏ —Å–≤–µ—Ç–∞.",
            "–£–ª—É—á—à–∞–µ—Ç –ª–æ–≤–∫–æ—Å—Ç—å –∏ —Å–∫–æ—Ä–æ—Å—Ç—å.",
            "–ü–æ–∑–≤–æ–ª—è–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç—å —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏."
        ]

        magic_elements = ["–ó–µ–º–ª—è", "–í–æ–¥–∞", "–û–≥–æ–Ω—å", "–í–æ–∑–¥—É—Ö", "–ù–µ—Ç"]
        element_weights = [0.3, 0.25, 0.2, 0.15, 0.1]  # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≤—ã–±–æ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤

        count_items = random.randint(1, 15)

        for i in range(count_items):
            name = random.choice(magic_items)
            count = random.randint(1, 1000)
            cost = random.randint(1, 1000)
            elements = random.choices(magic_elements)
            description = random.choice(descriptions)

            new_item = Item(name = name, count=count, cost=cost, description=description, product_composition=elements)

            self.items.append(new_item)
            print(f"–¢–æ–≤–∞—Ä {name} —É—Å–ø–µ—à–Ω–æ –∑–∞–∫–∞–∑–∞–Ω.")


    def show_items(self):
        print("=" * 100)
        for product in self.items:
            print(f"–ò–º—è —Ç–æ–≤–∞—Ä–∞: {product.get_name()}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ üèØ: {product.get_count()}, –°—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Öüíµ: {product.get_cost()}, –†–µ–π—Ç–∏–Ω–≥‚≠êÔ∏è: {product.get_rating()}/10")
        print("=" * 100)

    def show_item(self, name):
        find = True
        for item in self.items:
            if item.get_name() == name:
                print("=" * 100)
                print(item.get_name())
                print("_" * 100)
                print(item.get_description())
                print(f"–°—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Öüíµ: {item.get_cost()}")
                print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ üèØ: {item.get_count()}")
                print(f"–†–µ–π—Ç–∏–Ω–≥‚≠êÔ∏è: {item.get_rating()}/10")
                print("_" * 100)
                print("–°–æ—Å—Ç–∞–≤:")
                for element in item.get_product_composition():
                    print("  - " + element)
                print("=" * 100)

                find = False
        if find:
            print(f"–¢–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –º–∞–≥–∞–∑–∏–Ω–µ '{self.name}'.")
        

    def add_item(self, name, count, cost, description, elements):
        new_item = Item(name = name, count=count, cost=cost, description=description, product_composition=elements)

        self.items.append(new_item)
        print(f"–¢–æ–≤–∞—Ä {name} —É—Å–ø–µ—à–Ω–æ –∑–∞–∫–∞–∑–∞–Ω.")

    def rate_item(self, name, value):
        find = True
        for item in self.items:
            if item.get_name() == name:
                item.set_rating(value)
                print(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à —Ä–µ–π—Ç–∏–Ω–≥! –ù–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è {item.get_name()} : {item.get_rating()}/10")
                find = False
        if find:
            print(f"–¢–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –º–∞–≥–∞–∑–∏–Ω–µ '{self.name}'.")
